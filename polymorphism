import java.util.Date;

interface IShape {
    void draw();
}

class Shape {
    private static int nextAutoID = 1;
    private int autoID;
    private Date creationTimestamp;

    public Shape() {
        this.autoID = nextAutoID++;
        this.creationTimestamp = new Date();
    }

    public int getAutoID() {
        return autoID;
    }

    public Date getCreationTimestamp() {
        return creationTimestamp;
    }

    @Override
    public String toString() {
        return "Shape ID: " + autoID + ", Created at: " + creationTimestamp;
    }
}

class Square extends Shape implements IShape {
    private double sideLength;

    public Square(double sideLength) {
        this.sideLength = sideLength;
    }

    @Override
    public void draw() {
        System.out.println("Drawing a square with side length " + sideLength);
    }
}

class Rectangle extends Shape implements IShape {
    private double width;
    private double height;

    public Rectangle(double width, double height) {
        this.width = width;
        this.height = height;
    }

    @Override
    public void draw() {
        System.out.println("Drawing a rectangle with width " + width + " and height " + height);
    }
}

class Triangle extends Shape implements IShape {
    private double side1;
    private double side2;
    private double side3;

    public Triangle(double side1, double side2, double side3) {
        this.side1 = side1;
        this.side2 = side2;
        this.side3 = side3;
    }

    @Override
    public void draw() {
        System.out.println("Drawing a triangle with sides: " + side1 + ", " + side2 + ", " + side3);
    }
}

class Node {
    IShape shape;
    Node next;

    public Node(IShape shape) {
        this.shape = shape;
        this.next = null;
    }
}

public class ShapeLinkedList {
    private Node head;

    public void insert(IShape shape) {
        Node newNode = new Node(shape);
        if (head == null) {
            head = newNode;
        } else {
            Node current = head;
            while (current.next != null) {
                current = current.next;
            }
            current.next = newNode;
        }
    }

    public void display() {
        Node current = head;
        while (current != null) {
            current.shape.draw(); // Polymorphic call to the draw method
            System.out.println(current.shape);
            current = current.next;
        }
    }

    public static void main(String[] args) {
        ShapeLinkedList shapeList = new ShapeLinkedList();

        for (int i = 0; i < 100; i++) {
            int shapeType = i % 3; // Alternate between Square, Rectangle, and Triangle
            if (shapeType == 0) {
                shapeList.insert(new Square(i + 1));
            } else if (shapeType == 1) {
                shapeList.insert(new Rectangle(i + 1, i + 2));
            } else {
                shapeList.insert(new Triangle(i + 1, i + 2, i + 3));
            }
        }

        shapeList.display();
    }
}

